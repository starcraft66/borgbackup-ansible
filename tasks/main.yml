- name: install borg backup via apt
  apt:
    name:
      - borgbackup
      - borgmatic
      - python3-pip
    state: latest
  when: ansible_os_family == "Debian"

- name: install borg backup via yum
  yum:
    name:
      - borgbackup
      - python-pip
    state: latest
  when: ansible_os_family == "RedHat"

- name: install pexpect
  pip:
    name: pexpect

- name: Generate ssh keypair
  expect:
    command: "ssh-keygen -t rsa -b 4096"
    # only creates the key if the file does not exist
    creates: "{{ borg_client_ssh_key_location }}/backup_key"
    responses:
      "file": "{{ borg_client_ssh_key_location }}/backup_key"
      "passphrase": ""
  when: inventory_hostname in groups['backup_client']

- name: Ensure proper permissions
  file:
    name: "{{ item }}"
    state: file
    owner: root
    group: root
  loop:
    - "{{ borg_client_ssh_key_location }}/backup_key"
    - "{{ borg_client_ssh_key_location }}/backup_key.pub"
  when: inventory_hostname in groups['backup_client']

- name: read public key
  command: "cat {{ borg_client_ssh_key_location }}/backup_key.pub"
  register: backup_pub_key
  when: inventory_hostname in groups['backup_client']

- name: read repo server ecdsa ssh host key
  command: "ssh-keyscan -Ht ecdsa -p {% if hostvars[groups['repo_server'][0]].ansible_port is defined %} hostvars[groups['repo_server'][0]].ansible_port {% else %} 22 {% endif %} {{ hostvars[groups['repo_server'][0]].inventory_hostname }}"
  register: repo_host_key
  when: inventory_hostname in groups['repo_server']
  ignore_errors: true

- name: add the repo server's ssh ecdsa host key to the client
  lineinfile:
    path: /root/.ssh/known_hosts
    create: yes
    line: "{{ hostvars[groups['repo_server'][0]].repo_host_key.stdout }}"
  when: inventory_hostname in groups['backup_client']

- name: Copy backup script
  template:
    src: backup_helper.j2
    dest: /usr/local/bin/backup_helper
    owner: root
    group: root
    mode: 0700
  when: inventory_hostname in groups['backup_client']

- name: Add cron entry
  cron:
    cron_file: backup
    user: root
    state: present
    name: System Backup
    job: /usr/local/bin/backup_helper
    month: "*"
    weekday: "*"
    day: "*"
    hour: 0
    minute: 0
  when: inventory_hostname in groups['backup_client']

- name: create backup user
  user:
    name: "{{ borg_server_backup_user }}"
    group: "{{ borg_server_backup_group }}"
    create_home: yes
  when: inventory_hostname in groups['repo_server']

- name: add backup key to authorized keys
  authorized_key:
    user: "{{ borg_server_backup_user }}"
    key: "{{ hostvars[item].backup_pub_key.stdout }}"
    key_options: 'command="cd /var/backup/{{ hostvars[item].ansible_hostname }}; borg serve --restrict-to-path /var/backup/{{ hostvars[item].ansible_hostname }}",restrict'
  with_inventory_hostnames:
    - backup_client
  when: inventory_hostname in groups['repo_server']

- name: Check whether the backup repo for this host exists
  lineinfile:
    name: "{{ borg_server_repo_path }}/{{ hostvars[item].ansible_hostname }}/README"
    line: "This is a Borg Backup repository."
    state: present
  check_mode: yes
  ignore_errors: yes
  register: repo_exists
  with_inventory_hostnames:
    - backup_client
  when: inventory_hostname in groups['repo_server']

- name: initialize borg repo
  expect:
    command: "borg init --encryption=repokey {{ borg_server_repo_path }}/{{ hostvars[item].ansible_hostname }}"
    responses:
      "passphrase": "{{ hostvars[item].borg_repokey }}"
      "displayed": "N"
  with_inventory_hostnames:
    - backup_client
  when: (inventory_hostname in groups['repo_server']) and (repo_exists['results'][0].failed)

- name: set repo permissions
  file:
    path: "{{ borg_server_repo_path }}/{{ hostvars[item].ansible_hostname }}"
    state: directory
    recurse: yes
    mode: 0700
    owner: "{{ borg_server_backup_user }}"
    group: "{{ borg_server_backup_group }}"
  with_inventory_hostnames:
    - backup_client
  when: inventory_hostname in groups['repo_server']
